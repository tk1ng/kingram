create schema if not exists "custom_schema";

create extension if not exists "wrappers" with schema "custom_schema" version '0.5.3';

create table "custom_schema"."names" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text
);


alter table "custom_schema"."names" enable row level security;

CREATE UNIQUE INDEX "Names_pkey" ON custom_schema.names USING btree (id);

alter table "custom_schema"."names" add constraint "Names_pkey" PRIMARY KEY using index "Names_pkey";

grant delete on table "custom_schema"."names" to "anon";

grant insert on table "custom_schema"."names" to "anon";

grant references on table "custom_schema"."names" to "anon";

grant select on table "custom_schema"."names" to "anon";

grant trigger on table "custom_schema"."names" to "anon";

grant truncate on table "custom_schema"."names" to "anon";

grant update on table "custom_schema"."names" to "anon";

grant delete on table "custom_schema"."names" to "authenticated";

grant insert on table "custom_schema"."names" to "authenticated";

grant references on table "custom_schema"."names" to "authenticated";

grant select on table "custom_schema"."names" to "authenticated";

grant trigger on table "custom_schema"."names" to "authenticated";

grant truncate on table "custom_schema"."names" to "authenticated";

grant update on table "custom_schema"."names" to "authenticated";

grant delete on table "custom_schema"."names" to "service_role";

grant insert on table "custom_schema"."names" to "service_role";

grant references on table "custom_schema"."names" to "service_role";

grant select on table "custom_schema"."names" to "service_role";

grant trigger on table "custom_schema"."names" to "service_role";

grant truncate on table "custom_schema"."names" to "service_role";

grant update on table "custom_schema"."names" to "service_role";

create policy "Allow public access"
on "custom_schema"."names"
as permissive
for select
to anon
using (true);



create extension if not exists "pgjwt" with schema "extensions";


revoke delete on table "public"."accounts" from "anon";

revoke insert on table "public"."accounts" from "anon";

revoke references on table "public"."accounts" from "anon";

revoke select on table "public"."accounts" from "anon";

revoke trigger on table "public"."accounts" from "anon";

revoke truncate on table "public"."accounts" from "anon";

revoke update on table "public"."accounts" from "anon";

revoke delete on table "public"."accounts" from "authenticated";

revoke insert on table "public"."accounts" from "authenticated";

revoke references on table "public"."accounts" from "authenticated";

revoke select on table "public"."accounts" from "authenticated";

revoke trigger on table "public"."accounts" from "authenticated";

revoke truncate on table "public"."accounts" from "authenticated";

revoke update on table "public"."accounts" from "authenticated";

revoke delete on table "public"."accounts" from "service_role";

revoke insert on table "public"."accounts" from "service_role";

revoke references on table "public"."accounts" from "service_role";

revoke select on table "public"."accounts" from "service_role";

revoke trigger on table "public"."accounts" from "service_role";

revoke truncate on table "public"."accounts" from "service_role";

revoke update on table "public"."accounts" from "service_role";

alter table "public"."accounts" drop constraint "accounts_pkey";

drop index if exists "public"."accounts_pkey";

drop table "public"."accounts";

alter table "public"."caption_tags" enable row level security;

alter table "public"."comments" enable row level security;

alter table "public"."followers" enable row level security;

alter table "public"."hashtags" enable row level security;

alter table "public"."hashtags_posts" enable row level security;

alter table "public"."likes" enable row level security;

alter table "public"."photo_tags" enable row level security;

alter table "public"."posts" enable row level security;

alter table "public"."users" drop column "password";

alter table "public"."users" enable row level security;

drop sequence if exists "public"."accounts_id_seq";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_user_id_by_email(user_email text)
 RETURNS uuid
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
RETURN (SELECT id FROM auth.users WHERE email = user_email);
END;
$function$
;

CREATE OR REPLACE FUNCTION public.my_trigger()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$begin
  select 'hello';
  return new;
end;$function$
;

CREATE OR REPLACE FUNCTION public.rpc_demo()
 RETURNS text
 LANGUAGE sql
AS $function$
  select 'Hello Universe! RPC success';
$function$
;

create policy "Allow public access"
on "public"."users"
as permissive
for select
to anon
using (true);


create policy "Users can insert their own profile"
on "public"."users"
as permissive
for insert
to authenticated
with check (((( SELECT (auth.jwt() ->> 'sub'::text)))::integer = id));



